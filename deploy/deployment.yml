apiVersion: v1
kind: Namespace
metadata:
  name: pv-provisioner

---

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: nfs-storage-class
provisioner: fake-vendor/nfs-storage-provioner
reclaimPolicy: Delete
parameters:
  outerAssetRoot: /mnt/efs/
  ownerNewAssetUid: "1000"
  ownerNewAssetGid: "1000"

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: pv-provisioner
  namespace: pv-provisioner
imagePullSecrets:
- name: legacy-nexus

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pv-provisioner
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list","watch"]
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list","watch"]
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "list","watch","create", "update", "patch", "delete"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses"]
  verbs: ["get", "list","watch"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pv-provisioner
subjects:
- kind: ServiceAccount
  name: pv-provisioner
  namespace: pv-provisioner
roleRef:
  kind: ClusterRole
  name: pv-provisioner
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: persistent-volume-provisioner
  namespace: pv-provisioner
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pv-provisioner
  template:
    metadata:
      labels:
        app: pv-provisioner
    spec:
      serviceAccountName: pv-provisioner
      containers:
        - name: provisioner
          args:
            - -inner-asset-root=/pv
            - -storage-class=nfs-storage-class
          image: microk8s:32000/nfs-provisioner:0.0.1
          volumeMounts:
            - mountPath: /pv/
              name: data
      volumes:
        - name: data
          hostPath:
            path: /mnt/nfs/
            type: Directory
      dnsPolicy: Default
